cmake_minimum_required(VERSION 3.22)

set(PROJECT_VERSION "0.1")
configure_file(config.h.in conf.h)

set(PROJECT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/source)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Supported modes/protocols
set(MODES
    USE_PROTOCOL_UIM_6100
    USE_PROTOCOL_UEL
    USE_PROTOCOL_UKL
    USE_PROTOCOL_ALPACA
    USE_DEMO_MODE
    USE_TEST_MODE
)

# Switch OFF all modes
foreach(MODE IN LISTS MODES)
    set(${MODE} OFF CACHE BOOL "Disable ${MODE}" FORCE)
endforeach()

# Switch ON mode defined in USE_MODE
if(DEFINED USE_MODE AND USE_MODE IN_LIST MODES)
    set(${USE_MODE} ON CACHE BOOL "Enable ${USE_MODE}" FORCE)
else()
    message(FATAL_ERROR "Invalid USE_MODE specified! Available options: ${MODES}")
endif()

# Core project settings
project(dot_indicator_copy)
enable_language(C CXX ASM)

set(MCU_FAMILY STM32F1xx)
set(MCU_MODEL STM32F103xB)
set(CPU_PARAMETERS
    -mcpu=cortex-m3
    -mthumb
    -mfloat-abi=soft)

set(STARTUP_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/CubeMX/startup_stm32f103cbtx.s)
set(MCU_LINKER_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/CubeMX/STM32F103CBTX_FLASH.ld)
# ##############################################################################
set(EXECUTABLE ${CMAKE_PROJECT_NAME})

# Setup compiler settings
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)

# Include directories from Core and Drivers directories
set(CUBEMX_INCLUDE_DIRECTORIES
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/CMSIS/Device/ST/${MCU_FAMILY}/Include
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/CMSIS/Include
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/Inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc/Legacy
)

# Include directories source and build derictories
set(PROJECT_INCLUDE_DIRECTORIES

    # build for conf.h file generated by configure_file(config.h.in conf.h) command
    ${CMAKE_CURRENT_SOURCE_DIR}/build

    ${PROJECT_DIR}/app
    ${PROJECT_DIR}/drivers

    ${PROJECT_DIR}/middlewares/display_symbols

    ${PROJECT_DIR}/middlewares/peripherals
    ${PROJECT_DIR}/middlewares/peripherals/interfaces
    ${PROJECT_DIR}/middlewares/peripherals/menu
)

# List of source files from Core and Drivers directories
file(GLOB_RECURSE STM32CUBEMX_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/*.c)

# List of source files common for ALL MODES
set(PROJECT_SOURCES
    ${PROJECT_DIR}/app/main.c
    ${PROJECT_DIR}/drivers/dot.c

    ${PROJECT_DIR}/middlewares/display_symbols/drawing.c
    ${PROJECT_DIR}/middlewares/display_symbols/font.c

    ${PROJECT_DIR}/middlewares/peripherals/interfaces/usart.c
    ${PROJECT_DIR}/middlewares/peripherals/interfaces/can.c
    ${PROJECT_DIR}/middlewares/peripherals/tim.c
    ${PROJECT_DIR}/middlewares/peripherals/gpio.c

)

# List of source files common for ALL PROTOCOLS
set(COMMON_PROTOCOL_SOURCES
    ${PROJECT_DIR}/app/protocol_selection.c

    ${PROJECT_DIR}/middlewares/peripherals/flash.c
    ${PROJECT_DIR}/middlewares/peripherals/buzzer.c
    ${PROJECT_DIR}/middlewares/peripherals/test_Buzzer.c
    ${PROJECT_DIR}/middlewares/peripherals/menu/button.c
)

function(setup_protocol PROTOCOL_NAME PROTOCOL_FOLDER PROTOCOL_SOURCE_FILE)
    message(STATUS "${PROTOCOL_NAME} is enabled")

    # Add include derictories for PROTOCOL
    list(APPEND PROJECT_INCLUDE_DIRECTORIES
        ${PROJECT_DIR}/middlewares/protocols_modes/${PROTOCOL_FOLDER}
    )

    set(PROJECT_INCLUDE_DIRECTORIES "${PROJECT_INCLUDE_DIRECTORIES}" PARENT_SCOPE)

    # Add source files for PROTOCOL
    list(APPEND PROJECT_SOURCES
        ${PROJECT_DIR}/middlewares/protocols_modes/${PROTOCOL_FOLDER}/${PROTOCOL_SOURCE_FILE}
    )

    if(NOT PROTOCOL_NAME STREQUAL "TEST_MODE" AND NOT PROTOCOL_NAME STREQUAL "DEMO_MODE")
        list(APPEND PROJECT_SOURCES ${COMMON_PROTOCOL_SOURCES})
    endif()

    if(PROTOCOL_NAME STREQUAL "TEST_MODE")
        list(APPEND PROJECT_SOURCES
            ${PROJECT_DIR}/middlewares/peripherals/buzzer.c
            ${PROJECT_DIR}/middlewares/peripherals/test_Buzzer.c
        )
    endif()

    set(PROJECT_SOURCES "${PROJECT_SOURCES}" PARENT_SCOPE)

    # Set define for target_compile_definitions()
    set(PROTOCOL_MODE ${PROTOCOL_NAME}=1 PARENT_SCOPE)

endfunction()

# Include protocol-specific configurations
if(USE_PROTOCOL_UIM_6100)
    setup_protocol("PROTOCOL_UIM_6100" "uim6100" "uim6100.c")
elseif(USE_PROTOCOL_UEL)
    setup_protocol("PROTOCOL_UEL" "uel" "uel.c")
elseif(USE_PROTOCOL_UKL)
    setup_protocol("PROTOCOL_UKL" "ukl" "ukl.c")
elseif(USE_PROTOCOL_ALPACA)
    setup_protocol("PROTOCOL_ALPACA" "alpaca" "alpaca.c")
elseif(USE_DEMO_MODE)
    setup_protocol("DEMO_MODE" "demo_mode" "demo_mode.c")
    # message(STATUS "Demo mode is enabled")

    # # Add include derictories for DEMO_MODE
    # list(APPEND PROJECT_INCLUDE_DIRECTORIES
    #     ${PROJECT_DIR}/middlewares/protocols_modes/demo_mode
    # )

    # # Add source files for DEMO_MODE
    # list(APPEND PROJECT_SOURCES
    #     ${PROJECT_DIR}/middlewares/protocols_modes/demo_mode/demo_mode.c
    # )

    # # Set define for target_compile_definitions()
    # set(PROTOCOL_MODE DEMO_MODE=1)

elseif(USE_TEST_MODE)
    setup_protocol("TEST_MODE" "test_mode" "test_mode.c")
else()
    message(FATAL_ERROR "No valid protocol selected!")
endif()

# Add source files and startup_script for executable file, 
# for target EXECUTABLE=${CMAKE_PROJECT_NAME}
add_executable(${EXECUTABLE}
    ${STM32CUBEMX_SOURCES}
    ${PROJECT_SOURCES}
    ${STARTUP_SCRIPT})

# Add definitions (flags with prefix -D in cmd) for compilation
target_compile_definitions(${EXECUTABLE} PRIVATE
    ${MCU_MODEL}
    USE_HAL_DRIVER
    ${PROTOCOL_MODE})

# target_sources(${EXECUTABLE} PRIVATE
#     ${PROJECT_DIR}/app/config.h
#     ${PROJECT_DIR}/app/protocol_selection.h)

# Add header directories (AFTER add_executable !!)
target_include_directories(${EXECUTABLE} PRIVATE
    ${PROJECT_INCLUDE_DIRECTORIES}
    ${CUBEMX_INCLUDE_DIRECTORIES}
)




# Compiler and linker options
target_compile_options(${EXECUTABLE} PRIVATE
    ${CPU_PARAMETERS}
    # -Wall
    # -Wextra
    # -Wno-unused-parameter
    $<$<COMPILE_LANGUAGE:CXX>:
    -Wno-volatile
    -Wold-style-cast
    -Wuseless-cast
    -Wsuggest-override>
    $<$<CONFIG:Debug>:-Og -g3 -ggdb>
    $<$<CONFIG:Release>:-Og -g0>)

# Linker options
target_link_options(${EXECUTABLE} PRIVATE
    -T${MCU_LINKER_SCRIPT}
    ${CPU_PARAMETERS}
    -Wl,-Map=${CMAKE_PROJECT_NAME}.map
    --specs=nosys.specs
    -Wl,--start-group
    -lc
    -lm
    -lstdc++
    -lsupc++
    -Wl,--end-group
    -Wl,--print-memory-usage)

# Execute post-build to print size    
add_custom_command(TARGET ${EXECUTABLE} POST_BUILD
    COMMAND ${CMAKE_SIZE} $<TARGET_FILE:${EXECUTABLE}>)

# Convert output to hex and binary
add_custom_command(TARGET ${EXECUTABLE} POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O ihex $<TARGET_FILE:${EXECUTABLE}>
    ${EXECUTABLE}.hex
    COMMAND ${CMAKE_OBJCOPY} -O binary $<TARGET_FILE:${EXECUTABLE}>
    ${EXECUTABLE}.bin)

#========================= COMMAND FOR Command Line =====================================
# Flash the device using openocd (--targrt flash)
set(OPENOCD_PATH "C:/Program Files (x86)/OpenOCD-20240916-0.12.0")
set(OPENOCD_INTERFACE_PATH "${OPENOCD_PATH}/share/openocd/scripts/interface/stlink.cfg")
set(OPENOCD_TARGET_PATH "${OPENOCD_PATH}/share/openocd/scripts/target/stm32f1x.cfg")
set(FLASH_COMMAND "openocd")
set(FLASH_OPTIONS "-f \"${OPENOCD_INTERFACE_PATH}\" -f \"${OPENOCD_TARGET_PATH}\"")

add_custom_target(flash
    COMMAND ${FLASH_COMMAND} ${FLASH_OPTIONS} -c "program ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.elf verify reset exit"
    DEPENDS ${PROJECT_NAME}.elf
    COMMENT "Flashing STM32 device with ST-Link"
)

# Clear build directory (--targrt clean-build)
set(BUILD_DIR "${CMAKE_CURRENT_SOURCE_DIR}/build")

add_custom_target(clean-build

    COMMAND rm -rf ${BUILD_DIR}/*
    COMMAND rm -rf ${BUILD_DIR}/.*

    COMMENT "Remove build files"
)
