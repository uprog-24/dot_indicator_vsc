cmake_minimum_required(VERSION 3.22)

# Номер версии ПО, который отображается при первом запуске индикатора (при использовании протокола) 
set(PROJECT_VERSION "0.2")
configure_file(config.h.in conf.h)

# Указываем toolchain перед вызовом project()
set(CMAKE_TOOLCHAIN_FILE "${CMAKE_CURRENT_SOURCE_DIR}/toolchain.cmake" CACHE STRING "Toolchain file" FORCE)

# Название проекта
project(dot_indicator_copy)
enable_language(C CXX ASM)

set(PROJECT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/source)

# Генерируем compile_commands.json (в папке сборки build) с файлами, которые участвуют в компиляции 
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Поддерживаемые режимы/протоколы
set(MODES
    USE_PROTOCOL_UIM_6100
    USE_DEMO_MODE
    USE_TEST_MODE
)

#  Выключаем все режимы/протоколы
foreach(MODE IN LISTS MODES)
    set(${MODE} OFF CACHE BOOL "Disable ${MODE}" FORCE)
endforeach()

# Включаем режим/протокол, который передан в параметр USE_MODE
if(DEFINED USE_MODE AND USE_MODE IN_LIST MODES)
    set(${USE_MODE} ON CACHE BOOL "Enable ${USE_MODE}" FORCE)
    message(STATUS "Mode/protocol: ${USE_MODE} is enabled")
else()
    message(FATAL_ERROR "Invalid USE_MODE specified! Available options: ${MODES}")
endif()

set(MCU_FAMILY STM32F1xx)
# set(MCU_MODEL STM32F103xx)
set(MCU_MODEL STM32F103xB)
set(CPU_PARAMETERS
    -mcpu=cortex-m3
    -mthumb
    -mfloat-abi=soft)

set(STARTUP_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/CubeMX/startup_stm32f103cbtx.s)
set(MCU_LINKER_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/CubeMX/STM32F103CBTX_FLASH.ld)
# ##############################################################################
set(EXECUTABLE ${CMAKE_PROJECT_NAME})

# Setup compiler settings
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)


# Include directories
set(CUBEMX_INCLUDE_DIRECTORIES
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/CMSIS/Device/ST/${MCU_FAMILY}/Include
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/CMSIS/Include
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/Inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc/Legacy
    ${CMAKE_CURRENT_SOURCE_DIR}/build
)

set(PROJECT_INCLUDE_DIRECTORIES

    # build for conf.h file generated by configure_file(config.h.in conf.h) command
    ${CMAKE_CURRENT_SOURCE_DIR}/build

    ${PROJECT_DIR}/app
    ${PROJECT_DIR}/drivers

    ${PROJECT_DIR}/middlewares/display_symbols

    ${PROJECT_DIR}/middlewares/peripherals
    ${PROJECT_DIR}/middlewares/peripherals/interfaces
    ${PROJECT_DIR}/middlewares/peripherals/menu
)

# List of source files common for ALL MODES
set(PROJECT_SOURCES
    ${PROJECT_DIR}/app/main.c
    ${PROJECT_DIR}/drivers/dot.c

    ${PROJECT_DIR}/middlewares/display_symbols/drawing.c
    ${PROJECT_DIR}/middlewares/display_symbols/font.c

    # ${PROJECT_DIR}/middlewares/peripherals/interfaces/usart.c
    ${PROJECT_DIR}/middlewares/peripherals/interfaces/can.c
    ${PROJECT_DIR}/middlewares/peripherals/tim.c
    ${PROJECT_DIR}/middlewares/peripherals/gpio.c
)

file(GLOB_RECURSE STM32CUBEMX_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/*.c)

# Список требуемых файлов для всех протоколов
set(COMMON_PROTOCOL_SOURCES
    ${PROJECT_DIR}/app/protocol_selection.c

    ${PROJECT_DIR}/middlewares/peripherals/flash.c
    ${PROJECT_DIR}/middlewares/peripherals/buzzer.c
    ${PROJECT_DIR}/middlewares/peripherals/menu/button.c
)

# Функция для добавления N файлов в сборку (файлы протокола/режима)
function(setup_protocol PROTOCOL_NAME PROTOCOL_FOLDER PROTOCOL_SOURCE_FILES)

    # Добавляем заголовочный файл для протокола/режима
    list(APPEND PROJECT_INCLUDE_DIRECTORIES
        ${PROJECT_DIR}/middlewares/protocols_modes/${PROTOCOL_FOLDER}
    )
    set(PROJECT_INCLUDE_DIRECTORIES "${PROJECT_INCLUDE_DIRECTORIES}" PARENT_SCOPE)

    # Добавляем поочередно все предоставленные файлы ресурсов (file1.c;file2.c;file3.c)
    foreach(SRC IN LISTS PROTOCOL_SOURCE_FILES)
        list(APPEND PROJECT_SOURCES "${PROJECT_DIR}/${SRC}")
    endforeach()

    # Добавляем COMMON_PROTOCOL_SOURCES к PROJECT_SOURCES, если выбран протокол 
    # (не режим DEMO_MODE или TEST_MODE)
    if(NOT PROTOCOL_NAME STREQUAL "TEST_MODE" AND NOT PROTOCOL_NAME STREQUAL "DEMO_MODE")
        list(APPEND PROJECT_SOURCES ${COMMON_PROTOCOL_SOURCES})
    endif()

    set(PROJECT_SOURCES "${PROJECT_SOURCES}" PARENT_SCOPE)

    # Макрос для выбранного протокола/режима
    set(PROTOCOL_MODE ${PROTOCOL_NAME}=1 PARENT_SCOPE)
endfunction()

# Подключаем файлы, необходимые для протокола/режима
if(USE_PROTOCOL_UIM_6100)
    setup_protocol("PROTOCOL_UIM_6100" "uim6100"
        "middlewares/protocols_modes/uim6100/uim6100.c"
    )
    # setup_protocol("PROTOCOL_UIM_6100" "uim6100" "uim6100.c")
elseif(USE_DEMO_MODE)
    # setup_protocol("DEMO_MODE" "demo_mode" "demo_mode.c")

    setup_protocol("DEMO_MODE" "demo_mode"
        "middlewares/protocols_modes/demo_mode/demo_mode.c;middlewares/peripherals/buzzer.c"
    )
elseif(USE_TEST_MODE)
    # setup_protocol("TEST_MODE" "test_mode" "test_mode.c")
    setup_protocol("TEST_MODE" "test_mode"
        "middlewares/protocols_modes/test_mode/test_mode.c;middlewares/peripherals/buzzer.c")
else()
    message(FATAL_ERROR "No valid protocol selected!")
endif()


# Собираем исполняемый файл .exe
add_executable(${EXECUTABLE}
    ${STM32CUBEMX_SOURCES}
    ${PROJECT_SOURCES}
    ${STARTUP_SCRIPT})

# Макросы (defines)
target_compile_definitions(${EXECUTABLE} PRIVATE
    ${MCU_MODEL}
    ${PROTOCOL_MODE}
    USE_HAL_DRIVER)

# Добавляем директории с заголовочными файлами (ПОСЛЕ add_executable !!!)
target_include_directories(${EXECUTABLE} PRIVATE
    ${PROJECT_INCLUDE_DIRECTORIES}
    ${CUBEMX_INCLUDE_DIRECTORIES}
)

# Устанавливаем опции для компилятора и линковщика 
target_compile_options(${EXECUTABLE} PRIVATE
    ${CPU_PARAMETERS}
    # -Wall
    # -Wextra
    # -Wno-unused-parameter
    $<$<COMPILE_LANGUAGE:CXX>:
    # -Wno-volatile
    # -Wold-style-cast
    # -Wuseless-cast
    -Wsuggest-override>
    $<$<CONFIG:Debug>:-Og -g3 -ggdb>
    $<$<CONFIG:Release>:-Og -g0>)

# Опции для линкера
target_link_options(${EXECUTABLE} PRIVATE
    -T${MCU_LINKER_SCRIPT}
    ${CPU_PARAMETERS}
    -Wl,-Map=${CMAKE_PROJECT_NAME}.map
    # --specs=nosys.specs
    -Wl,--start-group
    -lc
    -lm
    -lstdc++
    -lsupc++
    -Wl,--end-group
    -Wl,--print-memory-usage)

# Execute post-build to print size    
add_custom_command(TARGET ${EXECUTABLE} POST_BUILD
    COMMAND ${CMAKE_SIZE} $<TARGET_FILE:${EXECUTABLE}>)

# Convert output to hex and binary
add_custom_command(TARGET ${EXECUTABLE} POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O ihex $<TARGET_FILE:${EXECUTABLE}>
    ${EXECUTABLE}.hex
    COMMAND ${CMAKE_OBJCOPY} -O binary $<TARGET_FILE:${EXECUTABLE}>
    ${EXECUTABLE}.bin)

# Flash the device using openocd (--targrt flash)
# Поиск openocd в PATH
find_program(OPENOCD_EXECUTABLE openocd)

if(NOT OPENOCD_EXECUTABLE)
    message(FATAL_ERROR "OpenOCD not found in PATH. Please install it or add to PATH.")
else()
    message(STATUS "Found OpenOCD: ${OPENOCD_EXECUTABLE}")
endif()

# Пути к конфигурационным скриптам (доступны глобально в OpenOCD)
set(OPENOCD_INTERFACE_PATH interface/stlink.cfg)
set(OPENOCD_TARGET_PATH target/stm32f1x.cfg)

# Настройка команды прошивки
add_custom_target(flash
    COMMAND ${OPENOCD_EXECUTABLE}
    -f ${OPENOCD_INTERFACE_PATH}
    -f ${OPENOCD_TARGET_PATH}
    -c "program ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.elf verify reset exit"
    DEPENDS ${PROJECT_NAME}.elf
    COMMENT "Flashing STM32 device with ST-Link"
)
